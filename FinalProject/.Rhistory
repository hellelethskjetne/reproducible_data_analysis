library(ggplot2)
library(tidyverse)
library(dplyr)
library(readr)
library(readxl)
library(ggpubr)
library(ggpmisc)
library(quantreg)
#set working directory
setwd("~/Documents/GEOL590/reproducible_data_analysis/homework/FinalProject/") #set working directory
getwd() #check working directory
#load data file(s)
crater_Warhol <- read_csv("Warhol_Mercury_test.csv", col_names = TRUE) #import data
view(crater_Warhol) #check that import was correct
#filter data
crater_Warhol_filter <- crater_Warhol[, c(1, 11, 12, 13)] #filter new data frame to show relevant colums (1=FID, 11=lat_y, 12=lon_x, 13=dia_km)
view(crater_Warhol_filter) #check that data was filtered correctly
#Primary center information (A)
center_Warhol_lat <- -2.576 #insert primary center latitude
center_Warhol_lon <- -6.263 #insert primary center longitude
#Secondary center information (B)
mid_y_lat <- crater_Warhol_filter$lat_y #information about midpoint position of secondary craters
mid_x_lon <- crater_Warhol_filter$lon_x #information about midpoint position of secondary craters
#Information about the planetary body
radius_mercury_km <- 2439.7 #insert radius of body in units of km
#Write function to calculate radians from degrees:
deg2rad <- function(deg) {
(deg * pi) / (180)
}
#Find Co-Lat. A (b)
#Degrees:
Co_Lat_A_deg <- 90 - center_Warhol_lat
#Radians:
Co_Lat_A_rad <- deg2rad(CoLat_A_deg)
#Primary center information (A)
center_Warhol_lat <- -2.576 #insert primary center latitude
center_Warhol_lon <- -6.263 #insert primary center longitude
#Secondary center information (B)
mid_y_lat <- crater_Warhol_filter$lat_y #information about midpoint position of secondary craters
mid_x_lon <- crater_Warhol_filter$lon_x #information about midpoint position of secondary craters
#Information about the planetary body
radius_mercury_km <- 2439.7 #insert radius of body in units of km
#Write function to calculate radians from degrees:
deg2rad <- function(deg) {
(deg * pi) / (180)
}
#Find Co-Lat. A (b)
#Degrees:
Co_Lat_A_deg <- 90 - center_Warhol_lat
#Radians:
Co_Lat_A_rad <- deg2rad(Co_Lat_A_deg)
#Find Co-Lat. B (a)
#Degrees:
Co_Lat_B_deg <- 90 - mid_y_lat
#Radians:
Co_Lat_B_rad <- deg2rad(Co_Lat_B_deg)
#Find Delta lon. (C)
#Degrees:
delta_lon_C_deg <- mid_x_lon - center_Warhol_lon
#Radians:
delta_lon_C_rad <- deg2rad(delta_lon_C_deg)
#Find Length (c)
#Radians:
length_c_rad <- acos((cos(Co_Lat_B_rad)*cos(Co_Lat_A_rad))+(sin(Co_Lat_B_rad)*sin(Co_Lat_A_rad)*cos(delta_lon_C_rad)))
#Length (km):
length_c_km <- length_c_rad * radius_mercury_km
#convert length (km) into a numeric vector
#length_km_factor <- factor(length_c_km)
distance_km <- as.numeric(length_c_km)
#Combine length (km) with filtered data (crater_Warhol_filter)
crater_Warhol_filter$distance_km <- distance_km
view(crater_Warhol_filter)
#The purpose of this code chunk is to combine the calcualted data with the pre exising data:
#convert length (km) into a numeric vector
#length_km_factor <- factor(length_c_km) #convert to factor if needed
distance_km <- as.numeric(length_c_km)
#Combine length (km) with filtered data (crater_Warhol_filter)
crater_Warhol_filter$distance_km <- distance_km
view(crater_Warhol_filter)
# 95th
rq_fit_warhol_95th <- rq(dia_km ~ distance_km, data = crater_Warhol_filter, tau = .95)
rq_fit_warhol_95th
summary(rq_fit_warhol_95th)
rq_fit_warhol_99th <- rq(dia_km ~ distance_km, data = crater_Warhol_filter, tau = .99)
rq_fit_warhol_99th
summary(rq_fit_warhol_99th)
rq_fit_warhol_99_9th <- rq(dia_km ~ distance_km, data = crater_Warhol_filter, tau = .999)
rq_fit_warhol_99_9th
summary(rq_fit_warhol_99_9th)
my.plot <- function() {
result <- ggplot(data = mtcars, #insert data
aes(x = wt, #define x axis
y = mpg)) + #define y axis
labs(x = "Weight (1000 lbs)", #define x label text
y = "Miles per Gallon") + #define y label text
ggtitle("Miles per Gallon for Different Car Weights") + # define title
geom_point(size = 3, color = "red") + #define plot type
theme( #general theme
axis.title.x = element_text(size = 18, face = "bold"),
axis.title.y = element_text(size = 18, face = "bold"),
legend.title = element_text(size = 15, face = "bold"),
legend.text = element_text(size = 15),
legend.key.size = unit(2.5, "lines"),
axis.text.x = element_text(size = 15, color = "black"),
axis.text.y = element_text(size = 15, color = "black"),
panel.grid.major = element_line(color = "grey70", size = 0.5),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill = NA, size = 1),
axis.line.y = element_line(color = "black", size = 1),
axis.line.x = element_line(color = "black", size = 1),
axis.line.x.top = element_line(color = "black", size = 1),
axis.ticks = element_line(color = "black", size = 1),
axis.ticks.length = unit(0.3, "cm"),
plot.title = element_text(family = "Helvetica",
face = "bold",
hjust = 0.5,
size = (18)))
}
